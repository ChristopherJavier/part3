{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","console","log","useEffect","noteService","initialNotes","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCRpCK,EAAU,aAwBD,EAtBA,WAQX,OAPgBC,IAAMC,IAAIF,GAOXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SChBvCK,G,MAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAe,OAAZA,EACM,KAIP,qBAAKd,UAAU,QAAf,SACGc,MAoGQC,EA/FH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACAC,QAAQC,WAAWH,GAEnBI,qBAAU,WACRF,QAAQC,IAAI,UACZE,IAEGvB,MAAK,SAAAwB,GACJX,EAASW,QAEZ,IAEHJ,QAAQC,IAAI,SAAUT,EAAMa,OAAQ,SAEpC,IAyCMC,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASU,IACvB,8BACE,yBAAQtB,QAAS,kBAAMqB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGU,EAAYE,KAAI,SAAAtC,GAAI,OACnB,cAAC,EAAD,CAEAA,KAAMA,EACNC,iBAAkB,kBAtCC,SAACc,GAC1B,IAAMf,EAAOsB,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KAChC0B,EAAW,2BAAOzC,GAAP,IAAaG,WAAYH,EAAKG,YAE/C8B,EACUlB,EAAI0B,GACX/B,MAAK,SAAAgC,GACJnB,EAASD,EAAMgB,KAAI,SAAAtC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO0C,SAEpDC,OAAM,SAAAC,GACLf,EAAgB,SAAD,OACJ7B,EAAKK,QADD,sCAGfwC,YAAW,WACThB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAG,GAAC,OAAIA,EAAEzB,KAAOA,SAsBV+B,CAAmB9C,EAAKe,MAF3Cf,EAAKe,SASd,uBAAMgC,SAlEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASmB,EACT2B,MAAM,IAAIC,MAAOC,YACjBlD,UAAWmD,KAAKC,SAAW,IAG7BtB,EACUiB,GACPxC,MAAK,SAAAgC,GACJnB,EAASD,EAAMkC,OAAOd,IACtBjB,EAAW,QAsDb,UACE,uBACEgC,MAAOjC,EACPkC,SArDiB,SAACV,GAExBvB,EAAWuB,EAAMW,OAAOF,UAqDpB,wBAAQG,KAAK,SAAb,yBCtGRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.69a18266.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    /* const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true\n    } */\n    return request.then(response => response.data/* .concat(nonExisting) */)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './index.css'\n\nconst Notification = ({ message }) => {\n  if(message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  console.log(typeof errorMessage)\n\n  useEffect(() => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString,\n      important: Math.random() < 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    /* console.log(event.target.value) */\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n    \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note \n          key={note.id} \n          note={note} \n          toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n        {/* {notes.map(note => \n          <Note key={note.id} note={note} />\n        )} */}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n\n/* const notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n] */\n"],"sourceRoot":""}